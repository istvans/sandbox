#include <algorithm>
#include <chrono>
#include <iostream>
#include <numeric>
#include <unordered_map>
#include <vector>

using namespace std;


// brute force: O{n^3) => 970045300 ns
class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums)
    {
        auto max_abs = 0;
        auto len = nums.size();
        for (size_t i = 0; i < len; ++i) {
            for (size_t j = i; j < len; ++j) {
                auto sum = 0;
                for (size_t k = i; k <= j; ++k){
                    sum += nums[k];
                }
                const auto abs_sum = std::abs(sum);
                max_abs = std::max(max_abs, abs_sum);
            }
        }
        return max_abs;
    }
};

int main()
{
    vector<int> very_long_input{-6647,5200,-8218,4449,3463,-512,7454,-7727,-3571,-3380,-1571,-4950,-8064,-6282,-7942,5606,5435,-5485,-8773,2971,-9062,-8221,1000,-378,-977,474,-4091,-2897,-2164,-8735,3287,5003,9323,2232,-6087,5095,-4340,-1110,-5537,-6318,1351,8780,5878,8429,-8640,5189,2062,-688,-7806,5123,5264,8445,-5313,-8028,-137,8931,7977,-5149,9806,18,-1903,-3887,9348,460,522,9313,-8051,3221,8216,8331,-288,-1521,3846,-5905,7515,-1973,8486,2909,6671,-6670,2547,-7329,-9672,4474,-4468,3807,894,6251,7128,103,-9667,-8212,-9836,-3886,7958,4019,-6626,-3059,-725,3387,4646,-5456,-906,9297,-4753,1199,-7262,470,5924,6945,605,2555,8538,-5304,-4685,6753,-6898,-9547,-4227,7820,-6205,8075,2167,3579,-5130,781,4255,-8486,-651,8018,-239,8474,-7807,-1557,1734,3346,-5977,-6275,-103,9180,-6730,-8469,-8860,-243,4040,8416,7106,8205,7130,-6994,-6092,6682,-421,-5673,-6870,1985,-8164,7898,-8020,-4593,-3144,-4091,7104,4874,7082,189,6438,-5138,8418,-9869,-6074,-5997,-6206,3773,8855,9765,3111,-7588,3786,-9271,5544,-2310,4335,-4393,-894,4480,1255,2604,6802,7461,-7191,-1384,-7869,-6495,3376,-7083,-6299,9345,-6775,-6800,1149,8611,-7936,-1257,8474,2149,-9834,-1671,-2541,4146,-9417,-5819,880,3961,4164,-9923,8558,-3260,-2844,6489,941,2052,-4351,-7017,-3425,-9419,-479,3895,-3487,-1011,9237,5541,2888,829,8325,-8210,2896,4508,-4149,-8838,-2249,-426,-7956,6429,-761,-9629,4523,-5904,6934,9504,5893,4162,2006,555,-2096,2155,3122,-5911,7464,-7454,-8651,-1099,6130,-1734,-9558,-7230,8042,1093,9373,-6352,-1211,5997,2732,2035,1395,-5238,1305,1615,3452,7899,-3682,6245,-1806,5571,2621,8064,-4238,6000,7680,-8996,7498,-8583,-8429,-7518,-3278,7443,-6150,7548,8007,-105,-8841,-1622,-8699,7294,2884,-2520,-657,9294,8540,965,-2545,-8003,-8117,7301,-7638,-9172,4072,5927,3686,8393,7689,-1627,-7866,1776,-9736,9969,-3698,-1099,-9351,976,395,2322,439,1390,480,-5312,-9887,3059,3214,-9024,-6263,-5771,8525,-206,7856,1311,7122,-3925,-4018,5950,4936,-7107,8609,-7473,-5278,-5879,-4898,7907,8977,1012,3387,-1216,-4655,8437,-6319,-354,-6879,-1753,4485,6945,-5382,4519,3911,431,4740,7758,-8366,-2467,-8542,-5255,622,455,7611,-2899,139,-8510,-7357,5957,1604,5236,5042,-2392,7663,-7076,8846,2191,7796,7539,8175,1184,3045,-9619,-2804,-3104,-6829,1454,-5003,5436,-9386,2220,-6260,-2031,4848,4801,2435,9273,5887,7064,-6642,-7932,-3081,-5260,-1231,6596,-7164,-8056,-5991,8262,4714,7887,-895,-3802,-5245,2782,-9718,770,9956,-2938,-8970,6345,-5785,-3407,-7971,6103,5342,524,5587,-9917,-1595,3415,6471,7780,-2124,2447,-3580,-1770,-1162,1184,6921,1368,283,6850,-8398,-6201,5668,-6032,9667,9161,-7093,9241,6367,-7445,-1818,-990,-7010,1101,-5220,-6041,-2044,-3740,3119,4983,-6031,-2500,3582,7501,4787,6907,-8748,9459,9625,-4931,1393,7143,-4923,-7823,-6802,8787,2176,7408,-7651,-5624,-6558,8366,-9803,-5541,7526,-2472,4683,-3228,6234,-5558,-4163,9053,4444,4190,-7501,-6400,1437,5222,-9553,3276,-4272,6338,-5987,-6582,-4363,-7624,-9248,4762,-7415,-1425,3051,-4806,-1450,-1036,-10000,-7695,-3901,9359,6231,2176,-8123,-5577,3276,-5689,9858,-9411,-6600,2034,9831,-6356,-7880,-8,4140,-2225,1221,9440,-2649,-1974,6726,-7388,-3710,-872,1168,378,-9431,3333,-8946,5783,2537,-6534,2858,-4196,8812,-5851,-6930,-5238,47,4260,-2157,-7556,-7281,-6418,-2414,-9699,-4130,9384,-4692,-8876,-713,-5242,-170,-4601,132,3372,-4703,-52,2447,-3976,2321,8505,5879,-8678,6132,-5250,-517,-5673,7964,-8478,-8704,5805,-1367,-9950,1688,-5976,3734,-5087,9834,-8527,577,-5379,831,-7371,4289,-5348,-6844,6493,-3235,-1614,-2304,-9983,9032,-1395,-4456,8480,-9998,5230,-9414,8450,8254,6818,595,-8660,-8012,-7963,-6207,9203,-5011,8503,8882,-8991,-3820,-3311,6593,-4235,-733,845,9567,-708,69,-9716,-3862,3351,3163,7822,9691,-7267,6821,-7635,771,-8804,2498,6414,-4029,7587,-9848,4096,-7722,8310,-8268,-1263,-8186,-5542,-1432,-7680,9598,3125,-5512,-3323,5023,-1407,-1407,5705,-8643,-4472,-9466,-7441,-9444,-8025,-7219,-7800,4393,3344,-6574,-2155,6871,-9308,3340,1528,-6417,-3736,-5864,2716,5029,9364,3131,355,-8975,5691,7390,9593,-5681,-2033,3926,-2462,4241,-100,6483,9567,-8099,5257,-6232,823,5201,6273,-7494,4137,2175,-1334,7092,9577,5571,-6759,6489,3550,-977,-9650,8332,5205,5891,-2531,3966,-6268,596,6027,2208,-7337,2064,8373,-1580,4793,-1486,3656,-972,-9203,4985,-5713,8120,4840,-3886,-3513,6966,-6757,-4638,-6653,125,9149,-1106,5223,950,5543,-9822,7395,-5204,-6570,5760,-4621,-7827,-4340,-1348,-6569,9599,-923,4474,5338,-966,6136,7249,8259,4656,7642,5398,7311,-4136,-658,5182,4266,-1753,5700,-7220,492,-6188,3495,-234,2812,-5504,-3267,-1322,-278,469,-3697,-8862,2680,34,-9024,-7532,5615,-7026,-6970,2093,-6676,-3544,-7651,-2193,5879,8144,3433,4745,-7009,6203,2265,4418,-1132,-5010,-2328,5151,8848,-6750,6033,-3650,9915,-7377,8637,2797,7104,-87,-5634,680,3436,8530,-7399,-7857,-6353,-2661,-964,-7210,-4496,-8077,6684,-6459,-6536,2601,7832,-857,4383,-917,-2352,4162,-719,5025,-6545,-6346,-3809,2729,-8377,-8703,7544,-5672,659,-21,-2321,-276,8600,833,-2017,1131,1986,9166,-3481,3306,8180,-7915,1755,3159,-5523,-9079,6323,-760,-6867,-6816,-9519,-3396,3984,492,9167,9941,4946,7117,2079,7616,6693,3293,9368,4887,4262,-8383,6982,1365,-9472,-4464,5546,6621,-216,3468,1639,2967,-8384,8994,2536,5248,9194,-6931,-2303,-7890,2869,1280,1683,3952,6080,-6424,-7802,5097,3492,-3040,2742,-4909,3928,7767,3350,-2408,-5191,8980,3459,8525,-7826,8466,-6845,-3940,6972,2669,2361,-3558,-9771,-3303,7691,5568,-8179,9926,703,4256,9915,9308,-7024,-2840,3640,7955,-1827,2425,1676,-4657,-3090,8532,-9444,3265,-5783,-6908,8199,5555,-5975};
    const auto t1 = std::chrono::high_resolution_clock::now();
    const auto res = Solution().maxAbsoluteSum(very_long_input);
    const auto t2 = std::chrono::high_resolution_clock::now();
    std::cout << res << std::endl;

    const auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>( t2 - t1 ).count();
    std::cout << "took " << duration << " ns" << std::endl;

    return 0;
}
